# %% [markdown]
# # Data Science Intern at Let's Grow More LGMVIP Feb 23
# # Intermediate Level Task
# # Prediction using Decision Tree Algorithm
# # Nachiket Shinde
# 
# ## Importing Libraries

# %%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %% [markdown]
# ## Connecting Google Drive with Google Colab

# %%
from google.colab import drive
drive.mount('/content/drive')

# %% [markdown]
# ## Importing Data Set from google drive

# %%
import os
os.chdir('/content/drive/My Drive')

# %% [markdown]
# ## Reading The Data Set

# %%
data=pd.read_csv('Iris.csv')
data.head()

# %%
data.tail()

# %% [markdown]
# ## Getting the Size of Data

# %%
data.shape

# %%
data.columns

# %% [markdown]
# ## Checking for Null Values

# %%
data.info()

# %%
data.isnull().sum()

# %% [markdown]
# ## Getting some Statistical Inference from the Data

# %%
data.describe(include='all')

# %% [markdown]
# ## Data Visualization

# %%
count = data['Species'].value_counts()
count.to_frame()

# %%
label = count.index.tolist()
val = count.values.tolist()

# %%
exp = (0.05,0.05,0.05)
fig,ax = plt.subplots()
ax.pie(val, explode=exp, labels=label, autopct='%1.1f%%', shadow=True, startangle=90)
plt.title("Different Species of flower present in the Data")
ax.axis('equal')
plt.show()

# %%
sns.pairplot(data=data, hue='Species')
plt.show()

# %%
corr = data.corr()
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(corr, annot=True, ax=ax, cmap='coolwarm')

# %% [markdown]
# ## Data Preparation

# %%
data = data.drop('Id', axis=1)
data.head()

# %%
x = data.iloc[:, 0:4]
x.head()

# %%
y = (data.iloc[:, 4])
y.head().to_frame()

# %%
from sklearn.preprocessing import StandardScaler

# %%
std = StandardScaler()
x = std.fit_transform(x)

# %%
from sklearn.model_selection import train_test_split

# %%
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 1)

# %% [markdown]
# ## Model Creation

# %%
from sklearn.tree import DecisionTreeClassifier

# %%
model = DecisionTreeClassifier()
model.fit(x_train, y_train)

# %% [markdown]
# ## Prediction using the Created Model

# %%
y_pred = model.predict(x_test)
y_pred

# %% [markdown]
# ## Model Evaluation

# %%
from sklearn.metrics import accuracy_score, confusion_matrix

# %%
acc = accuracy_score(y_test, y_pred)
print("The Accuracy of the Decision Tree Algorithms is : ", str(acc*100) + "%")

# %%
cm = confusion_matrix(y_test, y_pred)
cm

# %%
lst = data['Species'].unique().tolist()
df_cm = pd.DataFrame(data = cm, index = lst, columns = lst)
df_cm

# %% [markdown]
# ## Data Visualization for the Model

# %%
data.columns

# %%
col = data.columns.tolist()
print(col)

# %%
from sklearn.tree import plot_tree

# %%
fig = plt.figure(figsize=(25, 20))
tree_img = plot_tree(model, feature_names = col, class_names = lst, filled = True)


